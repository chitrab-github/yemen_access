# if needed, install `devtools` by uncommenting the immediately below
# install.packages("devtools")
devtools::install_github("arthur-shaw/susoapi")
knitr::opts_chunk$set(echo = TRUE)
# if needed, install `devtools` by uncommenting the immediately below
# install.packages("devtools")
devtools::install_github("arthur-shaw/susoapi")
set_credentials(
server = "yemenhbs2025-demo",
workspace = "yemenhbs_supv",
user = "yemenhbs_api",
password = "yemenHBS2025!"
)
devtools::install_github("arthur-shaw/susoapi")
set_credentials(
server = "yemenhbs2025-demo",
workspace = "yemenhbs_supv",
user = "yemenhbs_api",
password = "yemenHBS2025!"
)
#capture output
sink("output_log.txt", split = TRUE)
# Install packages --------------------------------------------------------
devtools::install_github("arthur-shaw/susoapi")
# Set Credentials ---------------------------------------------------------
set_credentials(
server = "yemenhbs2025-demo",
workspace = "yemenhbs_supv",
user = "yemenhbs_api",
password = "yemenHBS2025!"
)
sink()
all_questionnaires <- get_questionnaires()
knitr::opts_chunk$set(echo = TRUE)
# if needed, install `devtools` by uncommenting the immediately below
# install.packages("devtools")
devtools::install_github("michael-cw/SurveySolutionsAPIv2", build_vignettes = T)
library(SurveySolutionsAPIv2)
library(SurveySolutionsAPIv2)
devtools::install_github("michael-cw/SurveySolutionsAPI", build_vignettes = T)
knitr::opts_chunk$set(echo = TRUE)
# if needed, install `devtools` by uncommenting the immediately below
# install.packages("devtools")
gc()
devtools::install_github("michael-cw/SurveySolutionsAPIv2", build_vignettes = T)
devtools::install_github("michael-cw/SurveySolutionsAPIv2", build_vignettes = T)
devtools::install_github("michael-cw/SurveySolutionsAPIv2",
install.packages("vctrs", dependencies = T)
install.packages("vctrs", dependencies = T)
install.packages("vctrs")
install.packages("vctrs")
knitr::opts_chunk$set(echo = TRUE)
# if needed, install `devtools` by uncommenting the immediately below
# install.packages("devtools")
devtools::install_github("michael-cw/SurveySolutionsAPIv2")
pacman::p_load(
sf, terra, raster, gdistance, dplyr, readr, h3jsr, progress, parallel,
igraph, ggplot2, viridis, data.table
)
## 1 · Paths ----------------------------------------------------------
friction_dir  <-  "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - 150_icl_access_to_markets/Market_access_raster"
roads_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - 150_icl_access_to_markets/blocked_roads"
mixed_proj  <- st_layers(file.path(friction_dir, "YMN_GRUFS.gdb"))
gdb_dir <- file.path(friction_dir, "YMN_GRUFS.gdb")
fric_mx <- st_read(gdb_dir, layer = "YMN_GRUFS_mx")
View(fric_mx)
roads <- st_read(file.path(roads_dir, "yem_roads.shp"))
roads_opened <- st_read(file.path(roads_dir, "non_passable_combined.shp"))
boundary_aoc <- st_read(file.path(roads_dir,"shared_boundary.shp"))
# Filter block roads ------------------------------------------------------
blocked_roads <- roads %>% filter(Crrnt_s == "Not Passable")
# Convert roads to vect ---------------------------------------------------
blocked_roads_vect <- vect(blocked_roads) # non-passable according to LogIE
roads_opened_vect <- vect(roads_opened) #roads recently opened
boundary_aoc_vect <- vect(boundary_aoc)
# Replace value of roads in raster ----------------------------------------
# Compute global max of the raster
global_max <- global(fric_mx, fun = "max", na.rm = TRUE)[1, 1]
fric_mx <- rast(gdb_dir, layer = "YMN_GRUFS_mx")
fric_mx <- rast(gdb_dir, "YMN_GRUFS_mx")
fric_mx <- rast(gdb_dir,"YMN_GRUFS.gdb", "YMN_GRUFS_mx")
fric_mx <- rast(file.path(friction_dir,"YMN_GRUFS.gdb", "YMN_GRUFS_mx"))
fric_mx <- rast(file.path(friction_dir,"YMN_GRUFS.gdb", "YMN_GRUFS_mx.tif"))
fric_mx <- rast(file.path(friction_dir,"YMN_GRUFS.gdb", "YMN_GRUFS_mx"))
fric_mx <- rast(file.path(friction_dir,"ymn_mx"))
summary(fric_mx$Band_1)
# Replace value of roads in raster ----------------------------------------
# Compute global max of the raster
global_max <- global(fric_mx, fun = "max", na.rm = TRUE)[1, 1]
# Rasterize combined roads (set to 1 where road exists, NA elsewhere)
blocked_roads_rast <- rasterize(blocked_roads_vect, fric_mx, field = 1)
# Identify the cells in the raster where roads exist
blocked_road_cells <- !is.na(values(blocked_roads_rast))
# Replace values directly using raster math
fric_mx <- ifel(!is.na(rasterize(blocked_roads_vect, fric_mx, field = 1)), global_max, fric_mx)
fric_mx <- ifel(!is.na(rasterize(roads_opened_vect, fric_mx, field = 1)), global_max, fric_mx)
fric_mx <- ifel(!is.na(rasterize(boundary_aoc_vect, fric_mx, field = 1)), 3, fric_mx)
#check visually
# Base raster plot
plot(fric_mx, main = "Raster with Road-Intersected Cells Set to Global Max")
# Overlay the roads (in red)
plot(blocked_roads_vect, col = "red", add = TRUE)
plot(roads_opened_vect, col = "blue", add = TRUE)
plot(boundary_aoc_vect, col = "green", add = TRUE)
#check visually
# Base raster plot
plot(fric_mx, main = "Raster with Road-Intersected Cells Set to Global Max")
#check visually
# Base raster plot
plot(fric_mx, main = "Raster with Road-Intersected Cells Set to Global Max")
#check if code worked
vals_under_roads <- extract(fric_mx, rbind(blocked_roads_vect, roads_opened_vect, boundary_aoc_vect))[[2]]
all(vals_under_roads == global_max, na.rm = TRUE)
#check if code worked
vals_under_roads <- extract(fric_mx, rbind(blocked_roads_vect, roads_opened_vect))[[2]]
all(vals_under_roads == global_max, na.rm = TRUE)
table(vals_under_roads)
crs(fric_mx)
crs(blocked_roads_vect)
# Combine all road layers
all_roads_vect <- rbind(blocked_roads_vect, roads_opened_vect)
# Rasterize where roads exist
road_mask <- rasterize(all_roads_vect, fric_mx, field = 1)
# Apply global_max only where road_mask is not NA
fric_mx_updated <- ifel(!is.na(road_mask), global_max, fric_mx)
#check
plot(fric_mx_updated, main = "Updated Raster (Road Intersections = Global Max)")
plot(all_roads_vect, col = "red", add = TRUE)
plot(blocked_roads_vect, col = "red", add = TRUE)
#check
plot(fric_mx_updated, main = "Updated Raster (Road Intersections = Global Max)")
plot(blocked_roads_vect, col = "red", add = TRUE)
View(blocked_roads)
vals <- extract(fric_mx_updated, all_roads_vect)[[2]]
table(vals)  # you should see mostly global_max
all_roads_vect <- project(all_roads_vect, crs(fric_mx))
# Buffer the roads slightly to ensure they intersect raster cells (e.g., 100m buffer)
all_roads_buff <- buffer(all_roads_vect, width = 100)
# Rasterize buffered roads
road_mask <- rasterize(all_roads_buff, fric_mx, field = 1)
pacman::p_load(
sf, terra, raster, gdistance, dplyr, readr, h3jsr, progress, parallel,
igraph, ggplot2, viridis, data.table
)
## 1 · Paths ----------------------------------------------------------
friction_dir  <-  "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - 150_icl_access_to_markets/Market_access_raster"
roads_dir     <-  "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - 150_icl_access_to_markets/blocked_roads"
output_path   <-  file.path(friction_dir, "fric_mx_roads_updated.tif")
## 2 · Read inputs ----------------------------------------------------
fric_mx        <- rast(file.path(friction_dir, "ymn_mx"))
roads          <- st_read(file.path(roads_dir, "yem_roads.shp"))
roads_opened   <- st_read(file.path(roads_dir, "non_passable_combined.shp"))
boundary_aoc   <- st_read(file.path(roads_dir, "shared_boundary.shp"))
View(roads_opened)
View(roads)
## 3 · Filter and convert roads ---------------------------------------
blocked_roads       <- roads %>% filter(Crrnt_s == "Not Passable")
blocked_roads_vect  <- vect(blocked_roads)
roads_opened_vect   <- vect(roads_opened)
boundary_aoc_vect   <- vect(boundary_aoc)
# Combine and project
all_roads_vect <- rbind(blocked_roads_vect, roads_opened_vect)
all_roads_vect <- project(all_roads_vect, crs(fric_mx))
## 4 · Buffer and rasterize to disk -----------------------------------
# Slight buffer to ensure raster overlap
all_roads_buff <- buffer(all_roads_vect, width = 100)
# Save rasterized mask directly to disk
road_mask_path <- file.path(friction_dir, "road_mask_temp.tif")
road_mask <- rasterize(all_roads_buff, fric_mx, field = 1, filename = road_mask_path, overwrite = TRUE)
