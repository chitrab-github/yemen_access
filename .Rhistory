mkts <- read_csv(markets_csv) |>
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) |>
st_transform(crs_utm38)
fric_raster <- rast(mixed_proj)  # Friction raster in min/m
## Convert ADM2 to WGS for H3
adm2_wgs <- st_transform(adm2, 4326)
h3_cells <- polygon_to_cells(adm2_wgs, res = 7, simple = FALSE)
h3_cells <- cell_to_polygon(unlist(h3_cells$h3_addresses), simple = FALSE)
# Convert H3 indexes to center point geometries
grid_points <- h3jsr::cell_to_point(h3_cells, simple = FALSE)
# Convert to sf and reproject to match friction surface
grid_points <- st_as_sf(grid_points, coords = c("lng", "lat"), crs = 4326) |>
st_transform(crs_utm38)
# Add ID column
grid_points$id <- grid_points$h3_address
## Optional: Remove duplicate grid cells if needed
grid_points <- grid_points |> distinct(id, .keep_all = TRUE)
# Convert to WGS84 for H3 indexing
mkts_wgs <- st_transform(mkts, 4326)
# Assign H3 index to each market point
h3_res <- 9  # Same resolution used for grid_points
mkts_wgs$h3_index <- h3jsr::point_to_cell(mkts_wgs, res = h3_res)
# Keep only one market per H3 cell
# Option 1: Keep the first market per cell
mkts_unique <- mkts_wgs |>
group_by(h3_index) |>
slice(1) |>
ungroup()
# Reproject back to UTM for travel time calculation
mkts <- st_transform(mkts_unique, crs_utm38)
## Prepare progress bar
handlers(global = TRUE)
handlers("txtprogressbar")
## Function for 1 ADM2
compute_travel_time_adm2 <- function(adm_row, adm_index) {
poly <- adm2[adm_index, ]
poly_id <- poly$admin2Pcod  # or other unique ID
# Subset grid and markets
grid_sub <- grid_points[st_within(grid_points, poly, sparse = FALSE)[,1], ]
mkts_sub <- mkts[st_within(mkts, poly, sparse = FALSE)[,1], ]
if (nrow(grid_sub) == 0 || nrow(mkts_sub) == 0) return(NULL)
# Crop raster with buffer
poly_ext <- ext(st_bbox(poly)) + 10000  # 10km buffer
fric_crop <- crop(fric_raster, poly_ext)
# Create market raster
dest_cells <- cells(fric_crop, vect(mkts_sub))$cell
mkts_rast <- fric_crop; values(mkts_rast) <- NA
values(mkts_rast)[dest_cells] <- 1
# Compute accumulated cost
acc_cost <- accCost(fric_crop, mkts_rast)
# Extract values at grid points
grid_vect <- vect(grid_sub)
travel_vals <- extract(acc_cost, grid_vect)
# Return results with ADM2 ID
df <- data.frame(
h3_id = grid_sub$id,
travel_time_min = travel_vals[,2],
ID_ADM = poly_id
)
return(df)
}
## Run across all ADM2 units
progressr::with_progress({
p <- progressor(along = 1:nrow(adm2))
results <- lapply(seq_len(nrow(adm2)), function(i) {
p()
compute_travel_time_adm2(adm2, i)
})
})
## Prepare progress bar
handlers(global = TRUE)
handlers("txtprogressbar")
## Function for 1 ADM2
compute_travel_time_adm2 <- function(adm_row, adm_index) {
poly <- adm2[adm_index, ]
poly_id <- poly$admin2Pcod  # or other unique ID
# Subset grid and markets
grid_sub <- grid_points[st_within(grid_points, poly, sparse = FALSE)[,1], ]
mkts_sub <- mkts[st_within(mkts, poly, sparse = FALSE)[,1], ]
if (nrow(grid_sub) == 0 || nrow(mkts_sub) == 0) return(NULL)
# Crop raster with buffer
poly_ext <- ext(st_bbox(poly)) + 10000  # 10km buffer
fric_crop <- crop(fric_raster, poly_ext)
# Create market raster
# Reproject markets to raster CRS
mkts_sub <- st_transform(mkts_sub, crs = crs(fric_crop))
# Get coordinates
coords <- st_coordinates(mkts_sub)
# Find raster cell numbers
cell_ids <- terra::cellFromXY(fric_crop, coords)
# If no cells found, skip
if (all(is.na(cell_ids))) return(NULL)
# Create a binary raster for market locations
mkts_rast <- fric_crop
values(mkts_rast) <- NA
values(mkts_rast)[cell_ids] <- 1
# Compute accumulated cost
acc_cost <- accCost(fric_crop, mkts_rast)
# Extract values at grid points
grid_vect <- vect(grid_sub)
travel_vals <- extract(acc_cost, grid_vect)
# Return results with ADM2 ID
df <- data.frame(
h3_id = grid_sub$id,
travel_time_min = travel_vals[,2],
ID_ADM = poly_id
)
return(df)
}
## Run across all ADM2 units
progressr::with_progress({
p <- progressor(along = 1:nrow(adm2))
results <- lapply(seq_len(nrow(adm2)), function(i) {
p()
compute_travel_time_adm2(adm2, i)
})
})
## Function for 1 ADM2
compute_travel_time_adm2 <- function(adm2_all, adm_index) {
# Select one ADM2 polygon
poly <- adm2_all[adm_index, ]
poly_id <- poly$admin2Pcod  # Change if your ADM2 ID is named differently
# Subset grid points within ADM2
grid_sub <- grid_points[st_within(grid_points, poly, sparse = FALSE)[, 1], ]
if (nrow(grid_sub) == 0) return(NULL)
# Subset markets within ADM2
mkts_sub <- mkts[st_within(mkts, poly, sparse = FALSE)[, 1], ]
if (nrow(mkts_sub) == 0) return(NULL)
# Crop raster to a buffered extent around the ADM2 polygon
poly_ext <- ext(st_bbox(poly)) + 10000  # 10km buffer
fric_crop <- crop(fric_raster, poly_ext)
# Reproject markets and convert to coordinates
mkts_sub <- st_transform(mkts_sub, crs = crs(fric_crop))
mkts_coords <- st_coordinates(mkts_sub)
if (nrow(mkts_coords) == 0) return(NULL)
# Compute accumulated cost surface
acc_cost <- terra::accCost(fric_crop, mkts_coords)
# Extract travel time values at grid points
grid_sub <- st_transform(grid_sub, crs = crs(fric_crop))
grid_vect <- vect(grid_sub)
travel_vals <- extract(acc_cost, grid_vect)
# Combine into a data.frame
df <- data.frame(
h3_id = grid_sub$h3_id,
travel_time_min = travel_vals[, 2],
ID_ADM = poly_id
)
return(df)
}
## Run across all ADM2 units
progressr::with_progress({
p <- progressor(along = 1:nrow(adm2))
results <- lapply(seq_len(nrow(adm2)), function(i) {
p()
compute_travel_time_adm2(adm2, i)
})
})
packageVersion("terra")
## Load Packages
pacman::p_load(sf, terra, dplyr, h3jsr, progressr, data.table, readr)
## Set CRS
crs_utm38 <- "EPSG:32638"
## Define Paths
friction_dir  <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/Market_access_raster"
markets_csv <- file.path(markets_dir, "Marketpoints.csv")
## Define Paths
markets_dir   <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/spatial/Marketpoints"
friction_dir  <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/Market_access_raster"
markets_csv <- file.path(markets_dir, "Marketpoints.csv")
adm2_shp    <- file.path(shapefile_dir, "Admin2.geojson")
tt_mixed_100_hrs  <- file.path(friction_dir, "tt_mixed_yem_100_hrs.tif")
shapefile_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/101_admin"
markets_csv <- file.path(markets_dir, "Marketpoints.csv")
adm2_shp    <- file.path(shapefile_dir, "Admin2.geojson")
tt_mixed_100_hrs  <- file.path(friction_dir, "tt_mixed_yem_100_hrs.tif")
fric_raster <- rast(tt_mixed_100_hrs)
adm2 <- st_read(adm2_shp, quiet = TRUE) |> st_transform(crs_utm38)
mkts <- read_csv(markets_csv) |>
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) |>
st_transform(crs_utm38)
plot(fric_raster)
## Clip and mask raster
# Step 1: Convert adm2 to SpatVector (terra format)
adm2_vect <- vect(adm2)
# Step 2: Crop the raster to the extent of the adm2 shapefile (optional, for speed)
fric_crop <- crop(fric_raster, adm2_vect)
# Step 3: Mask the cropped raster using adm2 geometry
fric_mask <- mask(fric_crop, adm2_vect)
# Step 4 (Optional): Plot to check results
plot(fric_mask)
pop_rast <- file.path(population_dir, "ppp_2020_1km_Aggregated.tif")
population_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/103_worldpop_population"
pop_rast <- file.path(population_dir, "ppp_2020_1km_Aggregated.tif")
pop2020 <- rast([pop_rast])
pop2020 <- rast(pop_rast)
## Load Packages
pacman::p_load(sf, terra, dplyr, readr)
## Set CRS
crs_utm38 <- "EPSG:32638"
## Define Paths
markets_dir   <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/spatial/Marketpoints"
friction_dir  <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/Market_access_raster"
shapefile_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/101_admin"
population_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/103_worldpop_population"
adm2_shp    <- file.path(shapefile_dir, "Admin2.geojson")
tt_mixed_100_hrs  <- file.path(friction_dir, "tt_mixed_yem_100_hrs.tif")
pop_rast <- file.path(population_dir, "ppp_2020_1km_Aggregated.tif")
## Load Data
fric_raster <- rast(tt_mixed_100_hrs)
pop2020 <- rast(pop_rast)
adm2 <- st_read(adm2_shp, quiet = TRUE) |> st_transform(crs_utm38)
adm2_vect <- vect(adm2)
## Clip and Mask Travel Time Raster to ADM2 Extent
fric_crop <- crop(fric_raster, adm2_vect)
fric_mask <- mask(fric_crop, adm2_vect)
plot(fric_mask)
plot(fric_mask)
## Step 1: Aggregate 100m travel time to 1km resolution using mean
fric_1km_mean <- aggregate(fric_mask, fact = 10, fun = mean, na.rm = TRUE)
## Step 2: Resample population raster to match travel time raster (1km)
pop_resampled <- resample(pop2020, fric_1km_mean, method = "bilinear")
## Step 3: Create mask for cells with 0 < travel time < 2 hour
access_mask <- fric_1km_mean < 2 & fric_1km_mean > 0
## Step 4: Mask population raster using access mask
pop_access <- mask(pop_resampled, access_mask, maskvalues = FALSE)
# Ensure both rasters are in same CRS
if (crs(fric_raster) != crs_utm38) crs(fric_raster) <- crs_utm38
if (crs(pop2020) != crs_utm38) pop2020 <- project(pop2020, crs_utm38)
## Clip and Mask Travel Time Raster to ADM2 Extent
fric_crop <- crop(fric_raster, adm2_vect)
fric_mask <- mask(fric_crop, adm2_vect)
plot(fric_mask)
## Step 1: Aggregate 100m travel time to 1km resolution using mean
fric_1km_mean <- aggregate(fric_mask, fact = 10, fun = mean, na.rm = TRUE)
## Step 2: Resample population raster to match travel time raster (1km)
pop_resampled <- resample(pop2020, fric_1km_mean, method = "bilinear")
## Step 3: Create mask for cells with 0 < travel time < 2 hour
access_mask <- fric_1km_mean < 2 & fric_1km_mean > 0
## Step 4: Mask population raster using access mask
pop_access <- mask(pop_resampled, access_mask, maskvalues = FALSE)
## Step 5: Extract total population per ADM2
pop_total_by_adm2 <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
rename(total_pop = sum)
## Step 6: Extract population totals by ADM2
pop_total_by_adm2 <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE)
pop_access_by_adm2 <- extract(pop_access, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE)
# Convert to data frames and rename columns
pop_total_df <- st_drop_geometry(pop_total_by_adm2) |>
rename(total_pop = sum)
# Convert to data frames and rename columns
pop_total_df <- st_drop_geometry(pop_total_by_adm2) |>
dplyr::rename(total_pop = sum)
# Convert to data frames from SpatVector
pop_total_df <- as.data.frame(pop_total_by_adm2) |>
dplyr::rename(total_pop = sum)
## Step 6: Extract population totals by ADM2
pop_total_by_adm2 <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE)
pop_access_by_adm2 <- extract(pop_access, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE)
# Convert to data frames from SpatVector
pop_total_df <- as.data.frame(pop_total_by_adm2) |>
dplyr::rename(total_pop = sum)
## Step 6: Extract total and accessible population per ADM2
pop_total_df <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_total_df)[2] <- "total_pop"
pop_access_df <- extract(pop_access, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_access_df)[2] <- "accessible_pop"
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "ID") |>
mutate(
percent_access = 100 * accessible_pop / total_pop,
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
View(pop_access_df)
View(pop_total_df)
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "admin2Pcod") |>
mutate(
percent_access = 100 * accessible_pop / total_pop,
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "admin2Pcod") |>
mutate(
percent_access = 100 * (accessible_pop / total_pop ),
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "admin2Pcod") |>
mutate(
total_pop = as.numeric(total_pop),
accessible_pop = as.numeric(accessible_pop),
percent_access = 100 * (accessible_pop / total_pop),
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
View(pop_summary)
pop_total_df <- pop_total_df |>
mutate(total_pop = as.numeric(total_pop))
## Step 6: Extract total and accessible population per ADM2
pop_total_df <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_total_df)[2] <- "total_pop"
## Step 6: Extract total and accessible population per ADM2
pop_total_df <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_total_df)[6] <- "total_pop"
pop_access_df <- extract(pop_access, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_access_df)[6] <- "accessible_pop"
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "admin2Pcod") |>
mutate(
percent_access = 100 * (accessible_pop / total_pop),
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
## Load Packages
pacman::p_load(sf, terra, dplyr, readr)
## Set CRS
crs_utm38 <- "EPSG:32638"
## Define Paths
markets_dir   <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/spatial/Marketpoints"
friction_dir  <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/150_icl_access_to_markets/Market_access_raster"
shapefile_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/101_admin"
population_dir <- "C:/Users/wb569257/OneDrive - WBG/Alia Jane Aghajanian's files - Yemen Poverty Team FY23/Poverty Assessment/data/GIS/1_Original_Data/103_worldpop_population"
adm2_shp    <- file.path(shapefile_dir, "Admin2.geojson")
tt_mixed_100_hrs  <- file.path(friction_dir, "tt_mixed_yem_100_hrs.tif")
pop_rast <- file.path(population_dir, "ppp_2020_1km_Aggregated.tif")
## Load Data
fric_raster <- rast(tt_mixed_100_hrs)
pop2020 <- rast(pop_rast)
adm2 <- st_read(adm2_shp, quiet = TRUE) |> st_transform(crs_utm38)
adm2_vect <- vect(adm2)
# Ensure both rasters are in same CRS
if (crs(fric_raster) != crs_utm38) crs(fric_raster) <- crs_utm38
if (crs(pop2020) != crs_utm38) pop2020 <- project(pop2020, crs_utm38)
rm(pop_summary)
## Step 6: Extract total and accessible population per ADM2
pop_total_df <- extract(pop_resampled, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_total_df)[6] <- "total_pop"
pop_access_df <- extract(pop_access, adm2_vect, fun = sum, na.rm = TRUE, bind = TRUE) |>
as.data.frame()
names(pop_access_df)[6] <- "accessible_pop"
## Step 7: Join and calculate percent access
pop_summary <- left_join(pop_total_df, pop_access_df, by = "admin2Pcod") |>
mutate(
percent_access = 100 * (accessible_pop / total_pop),
percent_access = ifelse(is.nan(percent_access), NA, percent_access)
)
View(pop_summary)
## Step 8 (Optional): Join back to ADM2 geometry for mapping or export
adm2_summary <- left_join(adm2, pop_summary, by = "admin2Pcod")
View(adm2_summary)
## Step 9 (Optional): View or export
head(adm2_summary[, c("admin2Pcod", "total_pop", "accessible_pop", "percent_access")])
## Load Packages
pacman::p_load(sf, terra, dplyr, readr,tmap)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% pop. with access <1hr",
palette = "Blues",
style = "quantile",   # or "cont" for continuous scale
n = 5,
textNA = "No data",
colorNA = "gray80"
) +
tm_layout(
title = "Market Access within 1 Hour (ADM2)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% pop. with access <2hr",
palette = "Blues",
style = "quantile",   # or "cont" for continuous scale
n = 5,
textNA = "No data",
colorNA = "gray80"
) +
tm_layout(
title = "Share of Population with Market Access Within 1 Hour (Driving + Walking) (ADM2)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% pop. with access <2hr",
palette = "Blues",
style = "quantile",   # or "cont" for continuous scale
n = 5,
textNA = "No data",
colorNA = "gray80"
) +
tm_layout(
title = "% of Population with Market Access Within 1 Hour (Driving + Walking) (ADM2)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE,
title.position = c("center", "top")
)
## Load Packages
pacman::p_load(sf, terra, dplyr, readr,tmap, viridis)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE,
title.position = c("center", "top")
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access\n<= 2 hours",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access\nwithin 2 hours of driving + walking",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access\nwithin 2 hours",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <1 Hour (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE
)
tm_shape(adm2_summary) +
tm_polygons(
"percent_access",
title = "% of population with access\nwithin 2 hours",
palette = viridis(5, option = "D", direction = -1),  # 5-step viridis, reversed
style = "quantile",
n = 5,
textNA = "No data",
colorNA = "gray90"
) +
tm_layout(
title = "Share of Population Within Each ADM2 with Market Access <2 Hours (Driving + Walking)",
legend.outside = TRUE,
frame = FALSE
)
